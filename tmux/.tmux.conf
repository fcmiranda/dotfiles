###############################################################################
# Tmux prefix key
unbind C-Space
set -g prefix C-Space
bind C-Space send-prefix

###############################################################################
# Alternate session
# Switch between the last 2 tmux sessions, similar to 'cd -' in the terminal
# I use this in combination with the `choose-tree` to sort sessions by time
# Otherwise, by default, sessions are sorted by name, and that makes no sense
# -l stands for `last session`, see `man tmux`
unbind Space
bind-key Space switch-client -l

# This enables vim nagivation
# If for example I'm in the scrolling mode (yellow) can navigate with vim motions
# search with /, using v for visual mode, etc
set -g mode-keys vi

# Border lines between panes are thicker
# single -> single lines using ACS or UTF-8 characters
# double -> double lines using UTF-8 characters
# heavy  -> heavy lines using UTF-8 characters
# simple -> simple ASCII characters
# number -> the pane number
set -g pane-border-lines single

# Indicate active pane by colouring only half of the border in windows with 
# exactly two panes, by displaying arrow markers, by drawing both or neither.
# [off | colour | arrows | both]
set -g pane-border-indicators colour

# Enables tracking of focus events, allows tmux to respond when the terminal
# window gains or looses focus
set-option -g focus-events on

# When pressing prefix+s to list sessions, I want them sorted by time
# That way my latest used sessions show at the top of the list
# -s starts with sessions collapsed (doesn't show windows)
# -Z zooms the pane (don't uderstand what this does)
# -O specifies the initial sort field: one of ‘index’, ‘name’, or ‘time’ (activity).
# https://unix.stackexchange.com/questions/608268/how-can-i-force-tmux-to-sort-my-sessions-alphabetically
#
# bind s choose-tree -Zs -O time
# bind s choose-tree -Zs -O time -y
bind s choose-tree -Zs -O time -F "#{session_windows}"

# # Bind 'd' to perform the 'x' action when in choose-tree mode
# # In other words, this allows you to close sessions with "d" when in the session
# # navigator "choose-tree" that comes up with prefix+s
bind -n d if -F '#{==:#{pane_mode},tree-mode}' 'send x' 'send d'

# Use 'd' instead of 't' to tag panes that I want to delete
# bind -n d if -F '#{==:#{pane_mode},tree-mode}' 'send t' 'send d'

# Use 'D' instead of 'X' to delete all tagged panes
bind -n D if -F '#{==:#{pane_mode},tree-mode}' 'send X' 'send D'

# TODO: FZF

# Create vertical split
unbind '|'
bind '|' split-window -h

# Create horizontal split
unbind '-'
bind - split-window -v

# Switch to windows 1 through 4
# 'p' is normally used to go to the previous window, but I won't use it
# ctrl+b c -> new window
# ctrl+b , -> rename current window
# ctrl+b w -> show list of windows and sessions
unbind p
bind u select-window -t 1
bind i select-window -t 2
bind o select-window -t 3
bind p select-window -t 4

###############################################################################

# Reload the tmux configuration, display a 2 second message
unbind r
bind r source-file ~/.tmux.conf \; display-message -d 2000 "Reloaded!"

###############################################################################

# Bind pane synchronization to Ctrl-b s
unbind Q
bind Q setw synchronize-panes

# Go to previous window, I'm using 'p' to change to window 4
unbind m
bind m previous-window

# Resize pane to zoom so it occupies the entire screen
unbind M
bind -r M resize-pane -Z

# The number at the end specifies number of cells
# Increase or decrease to your liking
bind -r Left resize-pane -L 1
bind -r Down resize-pane -D 1
bind -r Up resize-pane -U 1
bind -r Right resize-pane -R 1

###############################################################################

# Change the keybinding to enter copy mode from 'prefix + [' to 'prefix + v'
unbind v
bind v copy-mode

# Bind Esc to exit copy-mode
bind-key -T copy-mode-vi 'Escape' send -X cancel

# start selecting text with "v", this is visual mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
# copy text with "y"
bind-key -T copy-mode-vi 'y' send -X copy-selection

# Thi is what allows me to press gh and gl to to to the beginning and end of
# line respectively when in copy-mode (visual mode)
# Unbind the default 'g' key in copy-mode-vi
unbind -T copy-mode-vi g
# Define a custom key table for extended copy-mode bindings
bind-key -T copy-mode-vi 'g' switch-client -T copy-mode-extended
# Bind 'h' in the extended copy-mode to go to the beginning of the line
bind-key -T copy-mode-extended 'h' send -X start-of-line \; switch-client -T copy-mode-vi
# Bind 'l' in the extended copy-mode to go to the end of the line
bind-key -T copy-mode-extended 'l' send -X end-of-line \; switch-client -T copy-mode-vi

# don't exit copy mode when dragging with mouse
unbind -T copy-mode-vi MouseDragEnd1Pane

# Bind Alt-t <M-t> in copy-mode
# This allows me to toggle my neovim terminal even if I'm in tmux copy-mode
# TODO: enable 
# bind-key -T copy-mode M-t run-shell "~/github/dotfiles-latest/tmux/tools/linkarzu/simple_toggle.sh"
# bind-key -T copy-mode-vi M-t run-shell "~/github/dotfiles-latest/tmux/tools/linkarzu/simple_toggle.sh"

###############################################################################

# https://github.com/leelavg/dotfiles/blob/897aa883a/config/tmux.conf#L30-L39
# https://scripter.co/command-to-every-pane-window-session-in-tmux/
# Send the same command to all panes/windows in current session
bind M-e command-prompt -p "Command:" \
  "run \"tmux list-panes -s -F '##{session_name}:##{window_index}.##{pane_index}' \
                | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""

# Send the same command to all panes/windows/sessions
bind M-E command-prompt -p "Command:" \
  "run \"tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' \
              | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""


# Increase scroll history
set-option -g history-limit 10000

# New windows normally start at 0, but I want them to start at 1 instead
set -g base-index 1

# With this set to off
# when you close the last window in a session, tmux will keep the session
# alive, even though it has no windows open. You won't be detached from
# tmux, and you'll remain in the session
set -g detach-on-destroy off

# Imagine if you have windows 1-5, and you close window 3, you are left with
# 1,2,4,5, which is inconvenient for my navigation method seen below
# renumbering solves that issue, so if you close 3 youre left with 1-4
set -g renumber-windows on

# Enable mouse support to resize panes, scrolling, etc
set -g mouse on

# I had to set this to on for osc52 to work
# https://github.com/ojroques/nvim-osc52
set -s set-clipboard on

# If I'm in insert mode typing text, and press escape, it will wait this amount
# of time to switch to normal mode when I press escape
# this setting was recommended by neovim `escape-time` (default 500)
# Can be set to a lower value, like 10 for it to be faster
set-option -sg escape-time 100

# I just realized that my eyes are normally on the top left corner on the
# screen, so moving the tmux bar to the top instead of bottom
set -g status-position top
# set -g status-position bottom

###############################################################################
# Theme
###############################################################################

# Catppuccin theme
# https://github.com/catppuccin/tmux
# Cons:
# - Doesn't have a sync panes like dracula
#   - Actually I was able to implement this, see below
# Pros:
# - I feel my terminal waaaaay smoother/faster, not completely sure about this
#   But could be due to all the refreshing and polling of data Dracula had to do

# I pinned to 0.3.0 beacuse a new version had breaking changes and my tmux bar
# looked like crap, spent hours trying to figure it out
set -g @plugin 'catppuccin/tmux#v2.1.2'
# set -g @plugin 'catppuccin/tmux#latest'
# or frappe, macchiato, mocha
set -g @catppuccin_flavor 'mocha'

set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " █"
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_status_modules_left "session"

# # set -g @catppuccin_status_modules_right "none"
# set -g @catppuccin_status_modules_right "directory"
# set -g @catppuccin_directory_text " linkarzu   If you like the video like it  , and remember to subscribe   "
# set -g @catppuccin_directory_color "#04d1f9"
# set -g @catppuccin_directory_icon "null"

# As 'man tmux' specifies:
# Execute the first command if shell-command (run with /bin/sh) returns success or the second command otherwise
if-shell 'test -f ~/github/dotfiles-latest/youtube-banner.txt' {
    set -g @catppuccin_status_modules_right "directory"
    set -g @catppuccin_directory_text " linkarzu   like   subscribe   "
    set -g @catppuccin_directory_icon "null"
} {
    set -g @catppuccin_status_modules_right "null"
}

# `user` and `host` are kind of useless, dont change when you ssh to devices
# set -g @catppuccin_status_modules_right "directory user host"
set -g @catppuccin_status_left_separator " "
set -g @catppuccin_status_right_separator ""
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_connect_separator "no"

# set -g @catppuccin_directory_text "#{pane_current_path}"

# This can be set to "icon" or "all" if set to "all" the entire tmux session
# name has color
# set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_fill "all"

# If you set this to off, the tmux line completely dissappears
set -g @catppuccin_status_default "on"


###############################################################################
# Plugins section
###############################################################################

# List of plugins
# for navigating between tmux panes using Ctrl-hjkl
# If you have neovim open in a tmux pane, and another tmux pane on the right,
# you won't be able to jump from neovim to the tmux pane on the right.
#
# If you want to do jump between neovim and tmux, you need to install the same
# 'vim-tmux-navigator' plugin inside neovim
set -g @plugin 'christoomey/vim-tmux-navigator'

# persist tmux sessions after computer restart
# https://github.com/tmux-plugins/tmux-resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'
# allow tmux-ressurect to capture pane contents
set -g @resurrect-capture-pane-contents 'on'

# automatically saves sessions for you every 15 minutes (this must be the last plugin)
# https://github.com/tmux-plugins/tmux-continuum
set -g @plugin 'tmux-plugins/tmux-continuum'
# enable tmux-continuum functionality
set -g @continuum-restore 'on'
# Set the save interval in minutes, default is 15
set -g @continuum-save-interval '5'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'